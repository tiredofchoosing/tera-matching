<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
    <meta charset="UTF-8">
    <title><%= strings.pageTitleStr %></title>
    <link rel="stylesheet" href="/static/css/style.css">
</head>
<body>
<% let isEmpty = Object.values(data).length === 0 %>
<% if (isEmpty) { %>
<div id="main">
	<h2 class="empty"><%= strings.emptyContentStr %></h2>
</div>
<% } else { %>
<div id="main">
	<div class="navigation">
		<div class="navigation-search">
			<span class="search-heading">üîç</span>
			<input type="text" id="searchName" class="searchName" placeholder="<%= strings.searchNameDungeonPlaceholderStr %>">
			<input type="text" id="searchMinLevel" class="searchMinLevel" placeholder="<%= strings.searchMinLevelvPlaceholderStr %>" title="<%= strings.searchMinLevelvTitleStr %>">
			<input type="text" id="searchMinItemLevel" class="searchMinItemLevel" placeholder="<%= strings.searchMinItemLevelPlaceholderStr %>" title="<%= strings.searchMinItemLevelTitleStr %>">
		</div>
		<div class="navigation-sort">
			<span class="sort-heading">üîÄ</span>
			<select id="sort" class="sort">
				<option value="minLevelDesc"><%= strings.minLevelDescContentStr %></option>
				<option value="minLevelAsc"><%= strings.minLevelAscContentStr %></option>
				<option value="minItemLevelDesc" selected="selected"><%= strings.minItemLevelDescContentStr %></option>
				<option value="minItemLevelAsc"><%= strings.minItemLevelAscContentStr %></option>
				<option value="nameDesc"><%= strings.nameDescContentStr %></option>
				<option value="nameAsc"><%= strings.nameAscContentStr %></option>
				<option value="playersDesc"><%= strings.playersDescContentStr %></option>
				<option value="playersAsc"><%= strings.playersAscContentStr %></option>
			</select>
			<button id="toggleDetails" class="toggleDetails" value="true"><%= strings.toggleDetailsContentStr %></button>
			<button id="toggleLang" class="toggleLang" value="<%= lang %>"><%= strings.toggleLangContentStr %></button>
			<button id="clearNavigation" class="clearNavigation"><%= strings.clearNavigationContentStr %></button>
			<br><input type="checkbox" id="autoupdateCheck" class="autoupdateCheck">
			<label for="autoupdateCheck"><%= strings.autoupdateLabelStr %></label>
			<br><input type="checkbox" id="saveCollapsed" class="saveCollapsed">
			<label for="saveCollapsed"><%= strings.saveCollapsedLabelStr %></label>
			<br><input type="checkbox" id="mergeSupportMatching" class="mergeSupportMatching">
			<label for="mergeSupportMatching"><%= strings.mergeSupportMatchingLabelStr.replace('$', dungeons_info['9999'].name) %></label>
		</div>
		<div class="navigation-toggle">
		</div>
	</div>
    <div id="dungeon-list">
        <% for(let dungeonId in data) { %>
			<% let dungeon = data[dungeonId]; dungeonProps = dungeons_info[dungeonId]; %>
			<details open class="dungeon-details" id="<%= dungeonId %>">
				<summary class="dungeon-summary">
					<span class="dungeon-lvl"><%= dungeonProps.minLevel %></span>
					<span class="dungeon-ilvl"><%= dungeonProps.minItemLevel %></span>
					<span class="dungeon-name"><%= dungeonProps.name %></span>
					<% let countTank = 0; dungeon.parties.forEach(p => countTank += p.players.filter(p1 => p1.role === 0).length); %>
					<% let countDmg = 0; dungeon.parties.forEach(p => countDmg += p.players.filter(p1 => p1.role === 1).length); %>
					<% let countHeal = 0; dungeon.parties.forEach(p => countHeal += p.players.filter(p1 => p1.role === 2).length); %>
					<span class="dungeon-players">
						<span class="dungeon-role"><%= countTank %><%= roles[0] %></span> | 
						<span class="dungeon-role"><%= countDmg %><%= roles[1] %></span> | 
						<span class="dungeon-role"><%= countHeal %><%= roles[2] %></span>
					</span>
				</summary>
				<% dungeon.parties.forEach(party => { %>
					<details class="party-details">
						<summary class="party-summary">
							<% Object.keys(party.players).forEach(id => { %>
								<% let player = party.players[id]; %>
								<span title="<%= classes[player.class] %> - <%= player.level %>">
								<%= (player.isLeaderRequired) ? 'üëë' : '' %>
								<%= roles[player.role] %>
								<%= player.name %>
								<%= (parseInt(id, 10) + 1 !== party.players.length) ? '|' : '' %>
								</span>
							<% });%>
						</summary>
						<% Object.keys(party.players).forEach(id => { %>
							<% let player = party.players[id]; %>
							<p class="party-detailed-content<%= player.level >= 65 ? ' level65 ' : ''%>">
								<%= (player.isLeaderRequired) ? 'üëë' : '' %>
								[<%= classes[player.class] %>
								<%= player.level %>
								<%= roles[player.role] %>]
								<%= player.name %>
							</p>
						<% });%>
					</details>
				<% });%>
			</details>
        <% };%>
    </div>
</div>
<script>
	let disableToggle = true;

	function isToggleEnabled() {
		return !disableToggle;
	}

	document.addEventListener('DOMContentLoaded', function() {
		let searchNameInput = document.getElementById('searchName');
		let searchMinLevelInput = document.getElementById('searchMinLevel');
		let searchMinItemLevelInput = document.getElementById('searchMinItemLevel');
		let sortSelect = document.getElementById('sort');
		let dungeonList = document.getElementById('dungeon-list');
		let dungeons = Array.from(dungeonList.getElementsByClassName('dungeon-details'));
		let toggleDetailsButton = document.getElementById('toggleDetails');
		let toggleLangButton = document.getElementById('toggleLang');
		let clearNavigationButton = document.getElementById('clearNavigation');
		let searchInputs = [searchNameInput, searchMinLevelInput, searchMinItemLevelInput];
		let autoupdateCheckbox = document.getElementById('autoupdateCheck');
		let autoupdateTimerId = -1;
		let saveCollapsedCheckbox = document.getElementById('saveCollapsed');
		let mergeSupportCheckbox = document.getElementById('mergeSupportMatching');

		let dungeonsOld;
		let merged = false;

		const lowestSupportDungeonLvl = 20;
		const saveCollapsedId = 'detailsCollapsed';
		const defaultSelectIndex = 2;

		function updateNavigation() {
			merged = false;
			mergeSupportCheckbox.dispatchEvent(new Event('change'));
			if (!merged) {
				sortSelect.dispatchEvent(new Event('change'));
				filterDungeons();
			}
			autoupdateCheckbox.dispatchEvent(new Event('change'));
			saveCollapsedCheckbox.dispatchEvent(new Event('change'));
			merged = false;
		}

		toggleDetailsButton.addEventListener('click', function() {
			let isOpen = this.value === 'true';
			this.value = !isOpen;

			disableToggle = true;
			dungeons.forEach(function(dungeon) {
				dungeon.open = !isOpen;
			});
			saveDetailsCollapsed();
			disableToggle = false;
		});
		
		toggleLangButton.addEventListener('click', function() {
			let lang = this.value === 'ru' ? 'en' : 'ru';
			this.value = lang;

			let date = new Date();
			date.setFullYear(date.getFullYear() + 1);
			document.cookie = `lang=${lang};expires=${date.toUTCString()};path=/;`;
			location.reload();
		});

		clearNavigationButton.addEventListener('click', function() {
			searchInputs.forEach(function(element) {
				element.value = '';
			});
			sortSelect.selectedIndex = defaultSelectIndex;
			autoupdateCheckbox.checked = false;
			saveCollapsedCheckbox.checked = false;
			mergeSupportCheckbox.checked = false;
			toggleDetailsButton.value = true;
			
			disableToggle = true;
			dungeons.filter(d => !d.open).forEach(d => d.open = true);
			disableToggle = false;
			updateNavigation();
		});
		
		autoupdateCheckbox.addEventListener('change', function() {
			if (window.sessionStorage) {
				let id = this.getAttribute('id');
				sessionStorage.setItem(id, this.checked);
			}
			setAutoupdate();
		});

		saveCollapsedCheckbox.addEventListener('change', function() {
			if (window.sessionStorage) {
				let id = this.getAttribute('id');
				sessionStorage.setItem(id, this.checked);
			}
			saveDetailsCollapsed();
		});

		mergeSupportCheckbox.addEventListener('change', function() {
			if (window.sessionStorage) {
				let id = this.getAttribute('id');
				sessionStorage.setItem(id, this.checked);
			}
			merged = mergeSupportMatching();
		});

		function mergeSupportMatching() {
			if (dungeonsOld != undefined) {
				let tempArr = dungeons;
				dungeons = dungeonsOld;
				dungeonsOld = tempArr;

				dungeonsOld.forEach(d => dungeonList.removeChild(d));
				dungeons.forEach(d => dungeonList.appendChild(d));
			}
			else if (mergeSupportCheckbox.checked) {
				let lowDungeon = dungeons.find(d => d.querySelector('.dungeon-lvl').innerText == lowestSupportDungeonLvl);
				if (lowDungeon == null)
					return false;

				let minSupportPlayerLvl = <%= dungeons_info['9999'].minLevel %>;

				let partyDetails = Array.from(lowDungeon.getElementsByClassName('party-details'));
				let supporters = partyDetails.filter(pd => pd.querySelector('.party-detailed-content.level65'));
				if (supporters.length === 0)
					return false;

				let supportersRoles = [];
				supporters.forEach(s => {
					let summaries = Array.from(s.getElementsByClassName('party-summary'));
					summaries.forEach(ps => ps.innerText.split('|').forEach(player => { 
						let role = player.trim().split(' ')[0];
						supportersRoles.push(role);
					}));
				});

				let supportDungeons = dungeons.filter(d => d.querySelector('.dungeon-lvl').innerText < minSupportPlayerLvl && d.querySelector('.party-detailed-content.level65') != null)
				supportDungeons.forEach(function(sup) {
					dungeonList.removeChild(sup);
					let newNode = sup.cloneNode(true);
					let parties = Array.from(newNode.getElementsByClassName('party-details'));
					if (supporters.length === parties.length)
						return;

					let roles = Array.from(newNode.getElementsByClassName('dungeon-role'));
					supportersRoles.forEach(sr => {
						roles.forEach(r => {
							let index = r.innerText.indexOf(sr);
							if (index !== -1) {
								let newCount = parseInt(r.innerText.slice(0, index)) - 1;
								r.innerText = newCount + sr;
							}
						});
					});

					parties.filter(p => p.querySelector('.party-detailed-content.level65') != null).forEach(p => newNode.removeChild(p));
					dungeonList.appendChild(newNode);
				});
				
				let newElem = lowDungeon.cloneNode(true);
				newElem.setAttribute('id', '9999');
				newElem.querySelector('.dungeon-lvl').innerText = minSupportPlayerLvl;
				newElem.querySelector('.dungeon-ilvl').innerText = <%= dungeons_info['9999'].minItemLevel %>;
				newElem.querySelector('.dungeon-name').innerText = '<%= dungeons_info['9999'].name %>';

				let parties = Array.from(newElem.getElementsByClassName('party-details'));
				if (supporters.length !== parties.length) {
					let roles = Array.from(newElem.getElementsByClassName('dungeon-role'));
					roles.forEach(r => {
						r.innerText = 0 + r.innerText.slice(-3);
					});

					supportersRoles.forEach(sr => {
						roles.forEach(r => {
							let index = r.innerText.indexOf(sr);
							if (index !== -1) {
								let newCount = parseInt(r.innerText.slice(0, index)) - 1;
								r.innerText = newCount + sr;
							}
						});
					});

					parties.filter(p => p.querySelector('.party-detailed-content.level65') == null).forEach(p => { newElem.removeChild(p) });
				}
				dungeonList.appendChild(newElem);

				dungeonsOld = dungeons;
				dungeons = Array.from(dungeonList.getElementsByClassName('dungeon-details'));
			}
			else {
				return false;
			}
			
			sortSelect.dispatchEvent(new Event('change'));
			filterDungeons();
			return true;
		}

		function saveDetailsCollapsed() {
			if (saveCollapsedCheckbox.checked) {
				if (dungeons.every(d => !d.open)) {
					sessionStorage.setItem(saveCollapsedId, 'all');
				}
				else if (dungeons.every(d => d.open)) {
					sessionStorage.removeItem(saveCollapsedId);
				}
				else {
					sessionStorage.setItem(saveCollapsedId, dungeons.filter(d => !d.open)
						.map(d => d.getAttribute('id')).join(','));
				}
			}
			else {
				if (window.sessionStorage) {
					sessionStorage.removeItem(saveCollapsedId);
				}
			}
		}

		function setAutoupdate() {
			if (autoupdateCheckbox.checked) {
				autoupdateTimerId = setTimeout(() => location.reload(), 5000); //TODO: set up timeout?
			}
			else if (autoupdateTimerId !== -1) {
				clearTimeout(autoupdateTimerId);
			}
		}

		function filterDungeons() {
			let searchNameVal = searchNameInput.value.toLowerCase();
			let searchMinLevelVal = searchMinLevelInput.value;
			let searchMinItemLevelVal = searchMinItemLevelInput.value;
			
			if (window.sessionStorage) {
				searchInputs.forEach(function(element) {
					let id = element.getAttribute('id');
					sessionStorage.setItem(id, element.value);
				});
			}

			dungeons.forEach(function(dungeon) {
				let name = dungeon.getElementsByClassName('dungeon-name')[0].textContent;
				let minLevel = parseInt(dungeon.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minItemLevel = parseInt(dungeon.getElementsByClassName('dungeon-ilvl')[0].textContent);

				let show = name.toLowerCase().includes(searchNameVal) &&
					checkLevel(minLevel, searchMinLevelVal) &&
					checkLevel(minItemLevel, searchMinItemLevelVal);

				dungeon.style.display = show ? '' : 'none';
			});
		}

		function checkLevel(level, searchVal) {
			if (searchVal === '') {
				return true;
			} else if (searchVal.endsWith('+')) {
				return level >= parseInt(searchVal);
			} else if (searchVal.endsWith('-')) {
				return level <= parseInt(searchVal);
			} else if (searchVal.includes('-')) {
				let [min, max] = searchVal.split('-').map(Number);
				return level >= min && level <= max;
			} else {
				return level === parseInt(searchVal);
			}
		}

		searchNameInput.addEventListener('input', filterDungeons);
		searchMinLevelInput.addEventListener('input', filterDungeons);
		searchMinItemLevelInput.addEventListener('input', filterDungeons);

		sortSelect.addEventListener('change', function() {
			let sortVal = this.value;
			let sortIndex = this.selectedIndex;

			if (window.sessionStorage) {
				let id = this.getAttribute('id');
				sessionStorage.setItem(id, sortIndex);
			}

			dungeons.sort(function(a, b) {
				let minLevelA = parseInt(a.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minLevelB = parseInt(b.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minItemLevelA = parseInt(a.getElementsByClassName('dungeon-ilvl')[0].textContent);
				let minItemLevelB = parseInt(b.getElementsByClassName('dungeon-ilvl')[0].textContent);
				let nameA = a.getElementsByClassName('dungeon-name')[0].textContent;
				let nameB = b.getElementsByClassName('dungeon-name')[0].textContent;
				let playersA = a.getElementsByClassName('party-detailed-content').length;
				let playersB = b.getElementsByClassName('party-detailed-content').length;

				switch(sortVal) {
					case 'minLevelDesc':
						return minLevelB - minLevelA;
					case 'minLevelAsc':
						return minLevelA - minLevelB;
					case 'minItemLevelDesc':
						return minItemLevelB - minItemLevelA;
					case 'minItemLevelAsc':
						return minItemLevelA - minItemLevelB;
					case 'nameDesc':
						return nameB.localeCompare(nameA);
					case 'nameAsc':
						return nameA.localeCompare(nameB);
					case 'playersDesc':
						return playersB - playersA;
					case 'playersAsc':
						return playersA - playersB;
				}
			});

			dungeons.forEach(function(dungeon) {
				dungeonList.appendChild(dungeon);
			});
		});

		// restore session data
		if (window.sessionStorage) {
			searchInputs.forEach(function(element) {
				let id = element.getAttribute('id');
				let val = sessionStorage.getItem(id);
				if (val != null) {
					element.value = val;
				}
			});

			let sortId = sortSelect.getAttribute('id');
			let sortVal = sessionStorage.getItem(sortId);
			if (sortVal != null) {
				sortSelect.selectedIndex = sortVal;
			}

			let checkboxes = [autoupdateCheckbox, saveCollapsedCheckbox, mergeSupportCheckbox];
			checkboxes.forEach(function(element) {
				let id = element.getAttribute('id');
				let val = sessionStorage.getItem(id);
				if (val != null) {
					element.checked = val === 'true';
				}
			});

			let saveCollapsedVal = sessionStorage.getItem(saveCollapsedId);
			if (saveCollapsedCheckbox.checked && saveCollapsedVal != null) {
				if (saveCollapsedVal === 'all') {
					dungeons.forEach(function(dungeon) {
						dungeon.open = false;
					});
				}
				else {
					let ids = saveCollapsedVal.split(',');
					dungeons.filter(d => ids.includes(d.getAttribute('id')))
						.forEach(function(dungeon) {
							dungeon.open = false;
						});
				}
			}
		}

		dungeons.forEach(function(dungeon) {
			dungeon.addEventListener('toggle', function() {
				if (isToggleEnabled()) {
					saveDetailsCollapsed();
				}
			});
		});

		updateNavigation();
	});
	
	// to not handle 'toggle' on default open attribute
    window.addEventListener('load', function() {
		disableToggle = false;
	});
</script>
<% };%>
</body>
</html>