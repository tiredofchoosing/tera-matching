<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
    <meta charset="UTF-8">
    <title>Dungeon matching</title>
    <link rel="stylesheet" href="/static/css/style.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
<% let isEmpty = Object.values(data).length === 0 %>
<% if (isEmpty) { %>
<div id="main">
	<h2 class="empty"><%= strings.emptyContentStr %></h2>
</div>
<% } else { %>
<div id="main">
	<div class="navigation">
		<div class="navigation-search">
			<span class="search-heading">üîç</span>
			<input type="text" id="searchName" class="searchName" placeholder="<%= strings.searchNameDungeonPlaceholderStr %>">
			<input type="text" id="searchMinLevel" class="searchMinLevel" placeholder="<%= strings.searchMinLevelvPlaceholderStr %>" title="<%= strings.searchMinLevelvTitleStr %>">
			<input type="text" id="searchMinItemLevel" class="searchMinItemLevel" placeholder="<%= strings.searchMinItemLevelPlaceholderStr %>" title="<%= strings.searchMinItemLevelTitleStr %>">
		</div>
		<div class="navigation-sort">
			<span class="sort-heading">üîÄ</span>
			<select id="sort" class="sort">
				<option value="minLevelDesc"><%= strings.minLevelDescContentStr %></option>
				<option value="minLevelAsc"><%= strings.minLevelAscContentStr %></option>
				<option value="minItemLevelDesc" selected="selected"><%= strings.minItemLevelDescContentStr %></option>
				<option value="minItemLevelAsc"><%= strings.minItemLevelAscContentStr %></option>
				<option value="nameDesc"><%= strings.nameDescContentStr %></option>
				<option value="nameAsc"><%= strings.nameAscContentStr %></option>
				<option value="playersDesc"><%= strings.playersDescContentStr %></option>
				<option value="playersAsc"><%= strings.playersAscContentStr %></option>
			</select>
			<button id="toggleDetails" class="toggleDetails" value="true"><%= strings.toggleDetailsContentStr %></button>
			<button id="toggleLang" class="toggleLang" value="<%= lang %>"><%= strings.toggleLangContentStr %></button>
			<button id="clearNavigation" class="clearNavigation"><%= strings.clearNavigationContentStr %></button>
		</div>
		<div class="navigation-toggle">
		</div>
	</div>
    <div id="dungeon-list">
        <% for(let dungeonId in data) { %>
			<% let dungeon = data[dungeonId]; dungeonProps = dungeons_info[dungeonId]; %>
			<details open class="dungeon-details">
				<summary class="dungeon-summary">
					<span class="dungeon-lvl"><%= dungeonProps.minLevel %></span>
					<span class="dungeon-ilvl"><%= dungeonProps.minItemLevel %></span>
					<span class="dungeon-name"><%= dungeonProps.name %></span>
					<% let countTank = 0; dungeon.parties.forEach(p => countTank += p.players.filter(p1 => p1.role === 0).length); %>
					<% let countDmg = 0; dungeon.parties.forEach(p => countDmg += p.players.filter(p1 => p1.role === 1).length); %>
					<% let countHeal = 0; dungeon.parties.forEach(p => countHeal += p.players.filter(p1 => p1.role === 2).length); %>
					<span class="dungeon-players"><%=countTank %><%= roles[0] %> | <%=countDmg %><%= roles[1] %> | <%= countHeal %><%= roles[2] %></span>
				</summary>
				<% dungeon.parties.forEach(party => { %>
					<details class="party-details">
						<summary class="party-summary">
							<% Object.keys(party.players).forEach(id => { %>
								<% let player = party.players[id]; %>
								<span title="<%= classes[player.class] %> - <%= player.level %>">
								<%= (player.isLeaderRequired) ? 'üëë' : '' %>
								<%= roles[player.role] %>
								<%= player.name %>
								<%= (parseInt(id, 10) + 1 !== party.players.length) ? '|' : '' %>
								</span>
							<% });%>
						</summary>
						<% Object.keys(party.players).forEach(id => { %>
							<p class="party-detailed-content">
								<% let player = party.players[id]; %>
								<%= (player.isLeaderRequired) ? 'üëë' : '' %>
								[<%= classes[player.class] %>
								<%= player.level %>
								<%= roles[player.role] %>]
								<%= player.name %>
							</p>
						<% });%>
					</details>
				<% });%>
			</details>
        <% };%>
    </div>
</div>
<script>
	document.addEventListener('DOMContentLoaded', function() {
		let searchNameInput = document.getElementById('searchName');
		let searchMinLevelInput = document.getElementById('searchMinLevel');
		let searchMinItemLevelInput = document.getElementById('searchMinItemLevel');
		let sortSelect = document.getElementById('sort');
		let dungeonList = document.getElementById('dungeon-list');
		let dungeons = Array.from(dungeonList.getElementsByClassName('dungeon-details'));
		let toggleDetailsButton = document.getElementById('toggleDetails');
		let toggleLangButton = document.getElementById('toggleLang');
		let clearNavigationButton = document.getElementById('clearNavigation');
		let searchInputs = [searchNameInput, searchMinLevelInput, searchMinItemLevelInput];
		const defaultSelectIndex = 2;

		function updateNavigation() {
			sortSelect.dispatchEvent(new Event('change'));
			filterDungeons();
		}

		toggleDetailsButton.addEventListener('click', function() {
			let isOpen = toggleDetailsButton.value === "true";
			toggleDetailsButton.value = !isOpen;

			dungeons.forEach(function(detail) {
				detail.open = !isOpen;
			});
		});
		
		toggleLangButton.addEventListener('click', function() {
			let lang = toggleLangButton.value === "ru" ? "en" : "ru";
			toggleLangButton.value = lang;

			document.cookie = `lang=${lang}`
			location.reload()
		});

		clearNavigationButton.addEventListener('click', function() {
			searchInputs.forEach(function(element) {
				element.value = '';
			});
			sortSelect.selectedIndex = defaultSelectIndex;
			updateNavigation();
		});

		function filterDungeons() {
			let searchNameVal = searchNameInput.value.toLowerCase();
			let searchMinLevelVal = searchMinLevelInput.value;
			let searchMinItemLevelVal = searchMinItemLevelInput.value;
			
			if (window.sessionStorage) {
				searchInputs.forEach(function(element) {
					let id = element.getAttribute('id');
					sessionStorage.setItem(id, element.value);
				});
			}

			dungeons.forEach(function(dungeon) {
				let name = dungeon.getElementsByClassName('dungeon-name')[0].textContent;
				let minLevel = parseInt(dungeon.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minItemLevel = parseInt(dungeon.getElementsByClassName('dungeon-ilvl')[0].textContent);

				let show = name.toLowerCase().includes(searchNameVal) &&
					checkLevel(minLevel, searchMinLevelVal) &&
					checkLevel(minItemLevel, searchMinItemLevelVal);

				dungeon.style.display = show ? '' : 'none';
			});
		}

		function checkLevel(level, searchVal) {
			if (searchVal === '') {
				return true;
			} else if (searchVal.endsWith('+')) {
				return level >= parseInt(searchVal);
			} else if (searchVal.endsWith('-')) {
				return level <= parseInt(searchVal);
			} else if (searchVal.includes('-')) {
				let [min, max] = searchVal.split('-').map(Number);
				return level >= min && level <= max;
			} else {
				return level === parseInt(searchVal);
			}
		}

		searchNameInput.addEventListener('input', filterDungeons);
		searchMinLevelInput.addEventListener('input', filterDungeons);
		searchMinItemLevelInput.addEventListener('input', filterDungeons);

		sortSelect.addEventListener('change', function() {
			let sortVal = this.value;
			let sortIndex = this.selectedIndex;

			if (window.sessionStorage) {
				let id = sortSelect.getAttribute('id');
				sessionStorage.setItem(id, sortIndex);
			}

			dungeons.sort(function(a, b) {
				let minLevelA = parseInt(a.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minLevelB = parseInt(b.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minItemLevelA = parseInt(a.getElementsByClassName('dungeon-ilvl')[0].textContent);
				let minItemLevelB = parseInt(b.getElementsByClassName('dungeon-ilvl')[0].textContent);
				let nameA = a.getElementsByClassName('dungeon-name')[0].textContent;
				let nameB = b.getElementsByClassName('dungeon-name')[0].textContent;
				let playersA = a.getElementsByClassName('party-detailed-content').length;
				let playersB = b.getElementsByClassName('party-detailed-content').length;

				switch(sortVal) {
					case 'minLevelDesc':
						return minLevelB - minLevelA;
					case 'minLevelAsc':
						return minLevelA - minLevelB;
					case 'minItemLevelDesc':
						return minItemLevelB - minItemLevelA;
					case 'minItemLevelAsc':
						return minItemLevelA - minItemLevelB;
					case 'nameDesc':
						return nameB.localeCompare(nameA);
					case 'nameAsc':
						return nameA.localeCompare(nameB);
					case 'playersDesc':
						return playersB - playersA;
					case 'playersAsc':
						return playersA - playersB;
				}
			});
			dungeons.forEach(function(dungeon) {
				dungeonList.appendChild(dungeon);
			});
		});

		if (window.sessionStorage) {
			searchInputs.forEach(function(element) {
				let id = element.getAttribute('id');
				if (sessionStorage.getItem(id) != undefined && sessionStorage.getItem(id) != null) {
					element.value = sessionStorage.getItem(id);
				}
			});

			let sortId = sortSelect.getAttribute('id');
			if (sessionStorage.getItem(sortId) != undefined && sessionStorage.getItem(sortId) != null) {
				sortSelect.selectedIndex = sessionStorage.getItem(sortId);
			}
		}

		updateNavigation();
	});
</script>
<% };%>
</body>
</html>