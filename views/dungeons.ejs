<!DOCTYPE html>
<html lang="<%= lang %>">
<head>
    <meta charset="UTF-8">
    <title><%= strings.pageTitleStr %></title>
    <link rel="stylesheet" href="/static/css/style.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
</head>
<body>
<div class="container">
	<% let isEmpty = Object.values(data).length === 0 %>
	<% if (isEmpty) { %>
	<div id="main">
		<h2 class="empty"><%= strings.emptyContentStr %></h2>
	</div>
	<% } else { %>
	<div id="main" class="main row">
		<div class="header col-md-5">
			<nav class="navbar navbar-expand-md navbar-dark">
				<div class="container-fluid">
					<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
						<span class="navbar-toggler-icon"></span>
					</button>
					<div class="collapse navbar-collapse" id="navbarText">
						<div class="navigation-menu">
							<div class="navigation-search">
								<input type="text" id="searchName col col-11" class="searchName" placeholder="<%= strings.searchNameDungeonPlaceholderStr %>">
								<input type="text" id="searchMinLevel col col-11" class="searchMinLevel" placeholder="<%= strings.searchMinLevelvPlaceholderStr %>" title="<%= strings.searchMinLevelvTitleStr %>">
								<input type="text" id="searchMinItemLevel col col-11" class="searchMinItemLevel" placeholder="<%= strings.searchMinItemLevelPlaceholderStr %>" title="<%= strings.searchMinItemLevelTitleStr %>">
							</div>
							<div class="navigation-sort">
								<button id="toggleLang" class="toggleLang" value="<%= lang %>">
									<img src="./../static/img/icons/global.svg" width="17px" height="17px">
								</button>
								<button id="toggleDetails" class="toggleDetails" value="true">
									<img src="./../static/img/icons/collapse.svg" width="17px" height="17px">
								</button>
								<button id="clearNavigation" class="clearNavigation">
									<img src="./../static/img/icons/reset.svg" width="17px" height="17px">
								</button>
								<button class="sort" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
									<img src="./../static/img/icons/sort.svg" width="17px" height="17px">
								</button>
								<ul id="sort" class="dropdown-menu dropdown-menu-dark sort" aria-labelledby="dropdownMenuButton">
									<li><a class="dropdown-item" href="#" value="minLevelDesc"><%= strings.minLevelDescContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="minLevelAsc"><%= strings.minLevelAscContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="minItemLevelDesc"><%= strings.minItemLevelDescContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="minItemLevelAsc"><%= strings.minItemLevelAscContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="nameDesc"><%= strings.nameDescContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="nameAsc"><%= strings.nameAscContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="playersDesc"><%= strings.playersDescContentStr %></a></li>
									<li><a class="dropdown-item" href="#" value="playersAsc"><%= strings.playersAscContentStr %></a></li>
								</ul>
								<!-- <select id="sort" class="sort">
									<option value="minLevelDesc"><%= strings.minLevelDescContentStr %></option>
									<option value="minLevelAsc"><%= strings.minLevelAscContentStr %></option>
									<option value="minItemLevelDesc" selected="selected"><%= strings.minItemLevelDescContentStr %></option>
									<option value="minItemLevelAsc"><%= strings.minItemLevelAscContentStr %></option>
									<option value="nameDesc"><%= strings.nameDescContentStr %></option>
									<option value="nameAsc"><%= strings.nameAscContentStr %></option>
									<option value="playersDesc"><%= strings.playersDescContentStr %></option>
									<option value="playersAsc"><%= strings.playersAscContentStr %></option>
								</select>
								<button id="toggleDetails" class="toggleDetails" value="true"><%= strings.toggleDetailsContentStr %></button>
								<button id="toggleLang" class="toggleLang" value="<%= lang %>"><%= strings.toggleLangContentStr %></button>
								<button id="clearNavigation" class="clearNavigation"><%= strings.clearNavigationContentStr %></button> -->
								<br><input type="checkbox" id="autoupdateCheck" class="autoupdateCheck">
								<label for="autoupdateCheck"><%= strings.autoupdateLabelStr %></label>
								<br><input type="checkbox" id="saveCollapsed" class="saveCollapsed" checked>
								<label for="saveCollapsed"><%= strings.saveCollapsedLabelStr %></label>
								<br><input type="checkbox" id="mergeSupportMatching" class="mergeSupportMatching">
								<label for="mergeSupportMatching"><%= strings.mergeSupportMatchingLabelStr.replace('$', dungeons_info['9999'].name) %></label>
							</div>
						</div>
					</div>
				</div>
			</nav>
		</div>
		<div id="dungeon-list" class="col dungeon-list">
			<% for(let dungeonId in data) { %>
				<% let dungeon = data[dungeonId]; dungeonProps = dungeons_info[dungeonId]; %>
				<details open class="dungeon-details" id="<%= dungeonId %>">
					<summary class="dungeon-summary">
						<span class="dungeon-lvl"><%= dungeonProps.minLevel %></span>
						<span class="dungeon-ilvl"><%= dungeonProps.minItemLevel %></span>

						<% let countTank = 0; dungeon.parties.forEach(p => countTank += p.players.filter(p1 => p1.role === 0).length); %>
						<% let countDmg = 0; dungeon.parties.forEach(p => countDmg += p.players.filter(p1 => p1.role === 1).length); %>
						<% let countHeal = 0; dungeon.parties.forEach(p => countHeal += p.players.filter(p1 => p1.role === 2).length); %>
						<span class="dungeon-players">
							<span class="dungeon-role"><%=countHeal %> <img src="./../static/img/icons/heal.svg" width="20px" height="20px"></span>
							<span class="dungeon-role"><%=countDmg %> <img src="./../static/img/icons/sword.svg" width="20px" height="20px"></span>
							<span class="dungeon-role"><%=countTank %> <img src="./../static/img/icons/shield.svg" width="20px" height="20px"></span>
						</span>
						<div class="dungeon-name">
							<span><%= dungeonProps.name %></span>
						</div>
					</summary>
					<% dungeon.parties.forEach(party => { %>
						<details class="party-details">
							<summary class="party-summary row row-cols-auto">
								<% Object.keys(party.players).forEach(id => { %>
									<% let player = party.players[id]; %>
									<span class="party-player col" title="<%= classes[player.class] %> - <%= player.level %>">
										<img class="party-playerImg" src="./../static/img/icons/<%= roles[player.role] %>.svg" width="15px" height="15px">
										<%= player.name %>
										<% if (player.isLeaderRequired) { %>
										<sup>
											<img class="party-playerImg" src="./../static/img/icons/leader.svg" width="13px" height="13px">
										</sup>
										<% } %>
									</span>
								<% });%>
							</summary>
							<% Object.keys(party.players).forEach(id => { %>
								<% let player = party.players[id]; %>
								<div class="party-detailed-content<%= player.level >= 65 ? ' level65 ' : ''%>">
									<p>
										<span class="party-player-summary">
											<img class="ClassImg" src="./../static/img/class_icons/<%= player.class %>.png" width="15px" height="15px" title="<%= classes[player.class] %>">
											<%= player.level %>
										</span>
										<%= player.name %>
										<% if (player.isLeaderRequired) { %>
										<sup>
											<img class="party-playerImg" src="./../static/img/icons/leader.svg" width="13px" height="13px">
										</sup>
										<% } %>
										<!-- <%= roles[player.role] %>] -->
									</p>
								</div>
							<% });%>
						</details>
					<% });%>
				</details>
			<% };%>
		</div>
    </div>
</div>
<script>
	let disableToggle = true;
	function isToggleEnabled() {
		return !disableToggle;
	}

	// to not handle 'toggle' on default open attribute
    window.addEventListener('load', () => disableToggle = false);

	document.addEventListener('DOMContentLoaded', function() {
		const dungeonList = document.getElementById('dungeon-list');
		const searchNameInput = document.getElementById('searchName');
		const searchMinLevelInput = document.getElementById('searchMinLevel');
		const searchMinItemLevelInput = document.getElementById('searchMinItemLevel');
		const sortSelect = document.getElementById('sort');
		const toggleLangButton = document.getElementById('toggleLang');
		const toggleDetailsButton = document.getElementById('toggleDetails');
		const clearNavigationButton = document.getElementById('clearNavigation');
		const autoupdateCheckbox = document.getElementById('autoupdateCheck');
		const saveCollapsedCheckbox = document.getElementById('saveCollapsed');
		const mergeSupportCheckbox = document.getElementById('mergeSupportMatching');
		const searchInputs = [searchNameInput, searchMinLevelInput, searchMinItemLevelInput];
		const checkboxes = [autoupdateCheckbox, saveCollapsedCheckbox, mergeSupportCheckbox];

		const defaultSelectIndex = 2;
		const autoupdateTimer = 10000;
		const lowestSupportDungeonLvl = 20;
		const saveCollapsedId = 'detailsCollapsed';
		const storage = window.sessionStorage; // || window.localStorage;

		let dungeons = Array.from(dungeonList.getElementsByClassName('dungeon-details'));
		let autoupdateTimerId = -1;
		let dungeonsOld;

		// functions
		function saveData(element, value = null) {
			if (storage) {
				let id = typeof(element) === "string" ? element : element.getAttribute('id');
				if (value != null)
					storage.setItem(id, value);
				else
					storage.removeItem(id);
			}
		}

		function loadData(element) {
			if (storage) {
				let id = typeof(element) === "string" ? element : element.getAttribute('id');
				return storage.getItem(id);
			}
			return null;
		}

		function filterDungeons(_, save = true) {
			save && searchInputs.forEach(e => saveData(e, e.value));

			let searchNameVal = searchNameInput.value.toLowerCase();
			let searchMinLevelVal = searchMinLevelInput.value;
			let searchMinItemLevelVal = searchMinItemLevelInput.value;

			function checkLevel(level, searchVal) {
				if (searchVal === '') {
					return true;
				} else if (searchVal.endsWith('+')) {
					return level >= parseInt(searchVal);
				} else if (searchVal.endsWith('-')) {
					return level <= parseInt(searchVal);
				} else if (searchVal.includes('-')) {
					let [min, max] = searchVal.split('-').map(Number);
					return level >= min && level <= max;
				} else {
					return level === parseInt(searchVal);
				}
			}

			dungeons.forEach(d => {
				let name = d.getElementsByClassName('dungeon-name')[0].textContent;
				let minLevel = parseInt(d.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minItemLevel = parseInt(d.getElementsByClassName('dungeon-ilvl')[0].textContent);

				let show = name.toLowerCase().includes(searchNameVal) &&
					checkLevel(minLevel, searchMinLevelVal) &&
					checkLevel(minItemLevel, searchMinItemLevelVal);

				d.style.display = show ? '' : 'none';
			});
		}

		function sortDungeons(_, save = true) {
			save && saveData(sortSelect, sortSelect.selectedIndex);

			let sortVal = sortSelect.value;
			dungeons.sort((a, b) => {
				let minLevelA = parseInt(a.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minLevelB = parseInt(b.getElementsByClassName('dungeon-lvl')[0].textContent);
				let minItemLevelA = parseInt(a.getElementsByClassName('dungeon-ilvl')[0].textContent);
				let minItemLevelB = parseInt(b.getElementsByClassName('dungeon-ilvl')[0].textContent);
				let nameA = a.getElementsByClassName('dungeon-name')[0].textContent;
				let nameB = b.getElementsByClassName('dungeon-name')[0].textContent;
				let playersA = a.getElementsByClassName('party-detailed-content').length;
				let playersB = b.getElementsByClassName('party-detailed-content').length;

				switch(sortVal) {
					case 'minLevelDesc':
						return minLevelB - minLevelA;
					case 'minLevelAsc':
						return minLevelA - minLevelB;
					case 'minItemLevelDesc':
						return minItemLevelB - minItemLevelA;
					case 'minItemLevelAsc':
						return minItemLevelA - minItemLevelB;
					case 'nameDesc':
						return nameB.localeCompare(nameA);
					case 'nameAsc':
						return nameA.localeCompare(nameB);
					case 'playersDesc':
						return playersB - playersA;
					case 'playersAsc':
						return playersA - playersB;
				}
			});
			dungeons.forEach(d => dungeonList.appendChild(d));
		}

		function saveDetailsCollapsed(_, save = true) {
			save && saveData(saveCollapsedCheckbox, saveCollapsedCheckbox.checked);

			if (saveCollapsedCheckbox.checked) {
				if (dungeons.every(d => !d.open)) {
					saveData(saveCollapsedId, 'all');
				}
				else if (dungeons.every(d => d.open)) {
					saveData(saveCollapsedId, null);
				}
				else {
					let ids = dungeons.filter(d => !d.open).map(d => d.getAttribute('id')).join(',')
					saveData(saveCollapsedId, ids);
				}
				saveData(toggleDetailsButton, toggleDetailsButton.value);
			}
			else {
				saveData(saveCollapsedId, null);
				saveData(toggleDetailsButton, null);
			}
		}

		function setAutoupdate(_, save = true) {
			save && saveData(autoupdateCheckbox, autoupdateCheckbox.checked);

			if (autoupdateCheckbox.checked) {
				autoupdateTimerId = setTimeout(() => location.reload(), autoupdateTimer); //TODO: set up timeout?
			}
			else if (autoupdateTimerId !== -1) {
				clearTimeout(autoupdateTimerId);
				autoupdateTimerId = -1;
			}
		}

		function mergeSupportMatching(_, save = true) {
			save && saveData(mergeSupportCheckbox, mergeSupportCheckbox.checked);

			if (dungeonsOld != undefined) {
				let tempArr = dungeons;
				dungeons = dungeonsOld;
				dungeonsOld = tempArr;

				dungeonsOld.forEach(d => dungeonList.removeChild(d));
				dungeons.forEach(d => dungeonList.appendChild(d));
			}
			else if (mergeSupportCheckbox.checked) {
				let lowDungeon = dungeons.find(d => d.querySelector('.dungeon-lvl').innerText == lowestSupportDungeonLvl);
				if (lowDungeon == null)
					return false;

				let minSupportPlayerLvl = <%= dungeons_info['9999'].minLevel %>;

				let partyDetails = Array.from(lowDungeon.getElementsByClassName('party-details'));
				let supporters = partyDetails.filter(pd => pd.querySelector('.party-detailed-content.level65'));
				if (supporters.length === 0)
					return false;

				let supportersRoles = [];
				supporters.forEach(s => {
					let summaries = Array.from(s.getElementsByClassName('party-summary'));
					summaries.forEach(ps => ps.innerText.split('|').forEach(player => {
						let role = player.trim().split(' ')[0];
						supportersRoles.push(role);
					}));
				});

				let supportDungeons = dungeons.filter(d => d.querySelector('.dungeon-lvl').innerText < minSupportPlayerLvl &&
					d.querySelector('.party-detailed-content.level65') != null);

				supportDungeons.forEach(function(sup) {
					dungeonList.removeChild(sup);
					let newNode = sup.cloneNode(true);
					let parties = Array.from(newNode.getElementsByClassName('party-details'));
					if (supporters.length === parties.length)
						return;

					let roles = Array.from(newNode.getElementsByClassName('dungeon-role'));
					supportersRoles.forEach(sr => {
						roles.forEach(r => {
							if (r.innerText.includes(sr)) {
								let newCount = parseInt(r.innerText) - 1;
								r.innerText = newCount + sr;
							}
						});
					});

					parties.filter(p => p.querySelector('.party-detailed-content.level65') != null).forEach(p => newNode.removeChild(p));
					newNode.addEventListener('toggle', dungeonDetailsToggleHandler);
					dungeonList.appendChild(newNode);
				});

				let newElem = lowDungeon.cloneNode(true);
				newElem.setAttribute('id', '9999');
				newElem.querySelector('.dungeon-lvl').innerText = minSupportPlayerLvl;
				newElem.querySelector('.dungeon-ilvl').innerText = <%= dungeons_info['9999'].minItemLevel %>;
				newElem.querySelector('.dungeon-name').innerText = '<%= dungeons_info['9999'].name %>';

				let parties = Array.from(newElem.getElementsByClassName('party-details'));
				if (supporters.length !== parties.length) {
					let roles = Array.from(newElem.getElementsByClassName('dungeon-role'));
					roles.forEach(r => {
						let index = parseInt(r.innerText).toString().length;
						r.innerText = 0 + r.innerText.slice(index);
					});

					supportersRoles.forEach(sr => {
						roles.forEach(r => {
							if (r.innerText.includes(sr)) {
								let newCount = parseInt(r.innerText) + 1;
								r.innerText = newCount + sr;
							}
						});
					});

					parties.filter(p => p.querySelector('.party-detailed-content.level65') == null).forEach(p => { newElem.removeChild(p) });
				}
				newElem.addEventListener('toggle', dungeonDetailsToggleHandler);
				dungeonList.appendChild(newElem);

				dungeonsOld = dungeons;
				dungeons = Array.from(dungeonList.getElementsByClassName('dungeon-details'));
			}
			else {
				return false;
			}

			save && saveDetailsCollapsed(null, false);
			sortDungeons(null, false);
			filterDungeons(null, false);
			return true;
		}

		function dungeonDetailsToggleHandler() {
			if (isToggleEnabled())
				saveDetailsCollapsed(null, false);
		}

		// register event handlers
		sortSelect.addEventListener('change', sortDungeons);
		searchNameInput.addEventListener('input', filterDungeons);
		searchMinLevelInput.addEventListener('input', filterDungeons);
		searchMinItemLevelInput.addEventListener('input', filterDungeons);
		dungeons.forEach(d => d.addEventListener('toggle', dungeonDetailsToggleHandler));
		autoupdateCheckbox.addEventListener('change', setAutoupdate);
		saveCollapsedCheckbox.addEventListener('change', saveDetailsCollapsed);
		mergeSupportCheckbox.addEventListener('change', mergeSupportMatching);

		clearNavigationButton.addEventListener('click', function() {
			searchInputs.forEach(e => e.value = '');
			sortSelect.selectedIndex = defaultSelectIndex;
			// autoupdateCheckbox.checked = false;
			// saveCollapsedCheckbox.checked = false;
			// mergeSupportCheckbox.checked = false;
			// toggleDetailsButton.value = true;
			
			// disableToggle = true;
			// dungeons.filter(d => !d.open).forEach(d => d.open = true);
			// disableToggle = false;

			sortDungeons(null, true);
			filterDungeons(null, true);
		});

		toggleDetailsButton.addEventListener('click', function() {
			let isOpen = this.value === 'true';
			this.value = !isOpen;
			if (saveCollapsedCheckbox.checked)
				saveData(this, this.value);

			disableToggle = true;
			dungeons.forEach(d => d.open = !isOpen);
			disableToggle = false;
			saveDetailsCollapsed(null, false);
		});

		toggleLangButton.addEventListener('click', function() {
			let lang = this.value === 'ru' ? 'en' : 'ru';
			this.value = lang;

			let date = new Date();
			date.setFullYear(date.getFullYear() + 1);
			document.cookie = `lang=${lang};expires=${date.toUTCString()};path=/;`;
			location.reload();
		});

		// restore session data
		searchInputs.forEach(e => e.value = loadData(e) ?? e.value);
		checkboxes.forEach(e => {
			let checked = loadData(e);
			if (checked != null)
				e.checked = checked === 'true';
		});
		sortSelect.selectedIndex = loadData(sortSelect) ?? sortSelect.selectedIndex;
		toggleDetailsButton.value = loadData(toggleDetailsButton) ?? toggleDetailsButton.value;

		if (!mergeSupportMatching(null, false)) {
			sortDungeons(null, false);
			filterDungeons(null, false);
		}
		setAutoupdate(null, false);

		let saveCollapsedVal = loadData(saveCollapsedId);
		if (saveCollapsedVal === 'all') {
			dungeons.forEach(d => d.open = false);
		}
		else if (saveCollapsedVal != null) {
			saveCollapsedVal.split(',').forEach(id => {
				let d = document.getElementById(id);
				if (d != null)
					d.open = false;
			});
			saveDetailsCollapsed(null, false);
		}
	});
</script>
<% };%>
</body>
</html>